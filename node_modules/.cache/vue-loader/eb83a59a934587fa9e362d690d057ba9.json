{"remainingRequest":"/home/runner/work/CF3_228117_ANALITICA_DE_DATOS/CF3_228117_ANALITICA_DE_DATOS/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/CF3_228117_ANALITICA_DE_DATOS/CF3_228117_ANALITICA_DE_DATOS/src/views/Tema6.vue?vue&type=template&id=c6f8cb5e&lang=pug","dependencies":[{"path":"/home/runner/work/CF3_228117_ANALITICA_DE_DATOS/CF3_228117_ANALITICA_DE_DATOS/src/views/Tema6.vue","mtime":1732496713224},{"path":"/home/runner/work/CF3_228117_ANALITICA_DE_DATOS/CF3_228117_ANALITICA_DE_DATOS/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CF3_228117_ANALITICA_DE_DATOS/CF3_228117_ANALITICA_DE_DATOS/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CF3_228117_ANALITICA_DE_DATOS/CF3_228117_ANALITICA_DE_DATOS/node_modules/babel-loader/lib/index.js","mtime":456789000000},{"path":"/home/runner/work/CF3_228117_ANALITICA_DE_DATOS/CF3_228117_ANALITICA_DE_DATOS/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/CF3_228117_ANALITICA_DE_DATOS/CF3_228117_ANALITICA_DE_DATOS/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/CF3_228117_ANALITICA_DE_DATOS/CF3_228117_ANALITICA_DE_DATOS/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CF3_228117_ANALITICA_DE_DATOS/CF3_228117_ANALITICA_DE_DATOS/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5jdXJzby1tYWluLWNvbnRhaW5lci5wYi0zCiAgQmFubmVySW50ZXJubwogIC5jb250YWluZXIudGFyamV0YS50YXJqZXRhLS1ibGFuY2EucC00LnAtbWQtNS5tYi01CiAgICAudGl0dWxvLXByaW5jaXBhbC5jb2xvci1hY2VudG8tY29udGVuaWRvCiAgICAgIC50aXR1bG8tcHJpbmNpcGFsX19udW1lcm8KICAgICAgICBzcGFuIDYKICAgICAgaDEgSW5mb3JtZXMgZXN0YWTDrXN0aWNvcwoKICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlcgogICAgICAuY29sLWxnLTQubXktbGctMC5teS0zLmoxCiAgICAgICAgaW1nLmltZy10LmltZy1hKHNyYz0nQC9hc3NldHMvdGVtcGxhdGUvaW1hZ2VzL2NmMy8xMDUucG5nJykKICAgICAgLmNvbC1sZy01Lm15LWxnLTAubXktMwogICAgICAgIC5iZzcudGV4dC13aGl0ZS5wLTMuYnJhZC5qMS5oLTEwMAogICAgICAgICAgcC5tYi0wCiAgICAgICAgICAgIHwgVW4gaW5mb3JtZSBlc3RhZCZpYWN1dGU7c3RpY28gZXMgdW4gZG9jdW1lbnRvIHF1ZSBwcmVzZW50YSBsb3MgcmVzdWx0YWRvcyBkZSB1biBhbiZhYWN1dGU7bGlzaXMgZXN0YWQmaWFjdXRlO3N0aWNvIGRlIG1hbmVyYSBlc3RydWN0dXJhZGEgeSBjb21wcmVuc2libGUuIFN1IG9iamV0aXZvIGVzIGNvbXVuaWNhciBpbmZvcm1hY2kmb2FjdXRlO24gY3VhbnRpdGF0aXZhIHkgY3VhbGl0YXRpdmEgYmFzYWRhIGVuIGRhdG9zLCBhcG95YWRhIGVuIGdyJmFhY3V0ZTtmaWNvcywgdGFibGFzIHkgZGVzY3JpcGNpb25lcyBxdWUgZmFjaWxpdGVuIGxhIGludGVycHJldGFjaSZvYWN1dGU7biBkZSBsb3MgaGFsbGF6Z29zLiBMb3MgaW5mb3JtZXMgZXN0YWQmaWFjdXRlO3N0aWNvcyBzb24gZnVuZGFtZW50YWxlcyBlbiBsYSB0b21hIGRlIGRlY2lzaW9uZXMgZW4gZGl2ZXJzb3MgY2FtcG9zIGNvbW8gbGEgY2llbmNpYSwgZWNvbm9tJmlhY3V0ZTthLCBzYWx1ZCwgZWR1Y2FjaSZvYWN1dGU7biB5IG0mYWFjdXRlO3MuCiAgICAgIC5jb2wtbGctMy5teS1sZy0wLm15LTMuajEKICAgICAgICBpbWcuaW1nLXQuaW1nLWEoc3JjPSdAL2Fzc2V0cy90ZW1wbGF0ZS9pbWFnZXMvY2YzLzEwNi5wbmcnKQogICAgLnNlcGFyYWRvci1jb250YWluZXIKICAgICAgLnNlcGFyYWRvcgogICAgc2VjdGlvbgogICAgICAjdF82XzEudGl0dWxvLXNlZ3VuZG8uY29sb3ItYWNlbnRvLWJvdG9uZXMKICAgICAgICBoMiA2LjEmI3g5O0VzdHJ1Y3R1cmEgZGUgdW4gaW5mb3JtZSBlc3RhZCZpYWN1dGU7c3RpY28KICAgICAgcAogICAgICAgIHwgVW4gaW5mb3JtZSBlc3RhZCZpYWN1dGU7c3RpY28gZGViZSBzZWd1aXIgdW5hIGVzdHJ1Y3R1cmEgY2xhcmEgeSBvcmdhbml6YWRhIHF1ZSBwZXJtaXRhIGEgbG9zIGxlY3RvcmVzIGNvbXByZW5kZXIgZiZhYWN1dGU7Y2lsbWVudGUgZWwgYW4mYWFjdXRlO2xpc2lzIHJlYWxpemFkby4gQSBjb250aW51YWNpJm9hY3V0ZTtuLCBzZSBwcmVzZW50YSB1bmEgZXN0cnVjdHVyYSBjb20mdWFjdXRlO24gcGFyYSBlc3RvcyBpbmZvcm1lczoKICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLm1iLTQKICAgICAgICAuY29sLWxnLTQubXktbGctMC5teS0zLmoxCiAgICAgICAgICBpbWcuaW1nLXQuaW1nLWEoc3JjPSdAL2Fzc2V0cy90ZW1wbGF0ZS9pbWFnZXMvY2YzLzEwNy5wbmcnKQogICAgICAgIC5jb2wtbGctOC5teS1sZy0wLm15LTMKICAgICAgICAgIG9sLmxpc3RhLW9sLS1jdWFkcm8uZmEtdWwKICAgICAgICAgICAgbGkKICAgICAgICAgICAgICAubGlzdGEtb2wtLWN1YWRyb19fdmluZXRhCiAgICAgICAgICAgICAgICBzcGFuIDEKICAgICAgICAgICAgICBzcGFuCiAgICAgICAgICAgICAgICBiIFBvcnRhZGE6CiAgICAgICAgICAgICAgICB8ICAgY29udGllbmUgZWwgdCZpYWN1dGU7dHVsbyBkZWwgaW5mb3JtZSwgZWwgbm9tYnJlIGRlIGxvcyBhdXRvcmVzLCBsYSBmZWNoYSBkZSBlbGFib3JhY2kmb2FjdXRlO24geSBsYSBlbnRpZGFkIHBhcmEgbGEgcXVlIHNlIHJlYWxpemEgZWwgZXN0dWRpby4KICAgICAgICAgICAgaHIKICAgICAgICAgICAgbGkKICAgICAgICAgICAgICAubGlzdGEtb2wtLWN1YWRyb19fdmluZXRhCiAgICAgICAgICAgICAgICBzcGFuIDIKICAgICAgICAgICAgICBzcGFuCiAgICAgICAgICAgICAgICBiIFJlc3VtZW4gZWplY3V0aXZvOgogICAgICAgICAgICAgICAgfCAgIGVzIHVuYSBicmV2ZSBkZXNjcmlwY2kmb2FjdXRlO24gZGVsIG9iamV0aXZvIGRlbCBhbiZhYWN1dGU7bGlzaXMsIGxhIG1ldG9kb2xvZyZpYWN1dGU7YSBlbXBsZWFkYSB5IGxhcyBwcmluY2lwYWxlcyBjb25jbHVzaW9uZXMuIEF1bnF1ZSBhcGFyZWNlIGFsIGluaWNpbywgZXMgcmVjb21lbmRhYmxlIHJlZGFjdGFybG8gYWwgZmluYWwsIGN1YW5kbyBlbCBpbmZvcm1lIGVzdCZlYWN1dGU7IGNvbXBsZXRvLgogICAgICAgICAgICBocgogICAgICAgICAgICBsaQogICAgICAgICAgICAgIC5saXN0YS1vbC0tY3VhZHJvX192aW5ldGEKICAgICAgICAgICAgICAgIHNwYW4gMwogICAgICAgICAgICAgIHNwYW4KICAgICAgICAgICAgICAgIGIgSW50cm9kdWNjaSZvYWN1dGU7bjoKICAgICAgICAgICAgICAgIHwgICBleHBvbmUgZWwgY29udGV4dG8gZGVsIGVzdHVkaW8sIGxvcyBvYmpldGl2b3MgZXNwZWMmaWFjdXRlO2ZpY29zIGRlbCBhbiZhYWN1dGU7bGlzaXMgeSBsYSBpbXBvcnRhbmNpYSBkZSBsb3MgcmVzdWx0YWRvcy4gVGFtYmkmZWFjdXRlO24gcHVlZGUgaW5jbHVpciBsYSBkZWZpbmljaSZvYWN1dGU7biBkZSBwYWxhYnJhcyBjbGF2ZS4KICAgICAgICAgICAgaHIKICAgICAgICAgICAgbGkKICAgICAgICAgICAgICAubGlzdGEtb2wtLWN1YWRyb19fdmluZXRhCiAgICAgICAgICAgICAgICBzcGFuIDQKICAgICAgICAgICAgICBzcGFuCiAgICAgICAgICAgICAgICBiIE1ldG9kb2xvZyZpYWN1dGU7YToKICAgICAgICAgICAgICAgIHwgICBkZXNjcmliZSBsb3MgbSZlYWN1dGU7dG9kb3MgZXN0YWQmaWFjdXRlO3N0aWNvcyB5IHQmZWFjdXRlO2NuaWNhcyBkZSByZWNvbGVjY2kmb2FjdXRlO24gZGUgZGF0b3MgdXRpbGl6YWRvcyBlbiBlbCBlc3R1ZGlvLiBJbmNsdXllIGluZm9ybWFjaSZvYWN1dGU7biBzb2JyZSBsYSBtdWVzdHJhLCBlbCB0aXBvIGRlIGRhdG9zIHJlY29sZWN0YWRvcywgbGFzIGZ1ZW50ZXMgZGUgaW5mb3JtYWNpJm9hY3V0ZTtuIHkgZWwgZW5mb3F1ZSBkZSBhbiZhYWN1dGU7bGlzaXMuCiAgICAgICAgICAgIGhyCiAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlcgogICAgICAgIC5jb2wtbGctOC5teS1sZy0wLm15LTMKICAgICAgICAgIG9sLmxpc3RhLW9sLS1jdWFkcm8uZmEtdWwKICAgICAgICAgICAgbGkKICAgICAgICAgICAgICAubGlzdGEtb2wtLWN1YWRyb19fdmluZXRhCiAgICAgICAgICAgICAgICBzcGFuIDUKICAgICAgICAgICAgICBzcGFuCiAgICAgICAgICAgICAgICBiIFJlc3VsdGFkb3M6CiAgICAgICAgICAgICAgICB8ICAgUHJlc2VudGEgbG9zIHJlc3VsdGFkb3Mgb2J0ZW5pZG9zIGEgdHJhdiZlYWN1dGU7cyBkZSB0YWJsYXMsIGdyJmFhY3V0ZTtmaWNvcyB5IGRlc2NyaXBjaW9uZXMgZGV0YWxsYWRhcy4gTG9zIHJlc3VsdGFkb3MgZGViZW4gc2VyIGNsYXJvcyB5IGVzdGFyIGFwb3lhZG9zIHBvciBsYXMgbWVkaWRhcyBlc3RhZCZpYWN1dGU7c3RpY2FzIGNvcnJlc3BvbmRpZW50ZXMgKG1lZGlkYXMgZGUgdGVuZGVuY2lhIGNlbnRyYWwsIGRpc3BlcnNpJm9hY3V0ZTtuLCBmcmVjdWVuY2lhcywgZXRjLikuCiAgICAgICAgICAgIGhyCiAgICAgICAgICAgIGxpCiAgICAgICAgICAgICAgLmxpc3RhLW9sLS1jdWFkcm9fX3ZpbmV0YQogICAgICAgICAgICAgICAgc3BhbiA2CiAgICAgICAgICAgICAgc3BhbgogICAgICAgICAgICAgICAgYiBBbiZhYWN1dGU7bGlzaXMgZSBpbnRlcnByZXRhY2kmb2FjdXRlO246CiAgICAgICAgICAgICAgICB8ICBBcXUmaWFjdXRlOyBzZSBpbnRlcnByZXRhIGxhIGluZm9ybWFjaSZvYWN1dGU7biBwcmVzZW50YWRhIGVuIGxvcyByZXN1bHRhZG9zLiBTZSBkZWJlbiBkZXN0YWNhciBsb3MgcGF0cm9uZXMgaW1wb3J0YW50ZXMsIGxhcyByZWxhY2lvbmVzIGVudHJlIHZhcmlhYmxlcyB5IGN1YWxxdWllciBjb25jbHVzaSZvYWN1dGU7biByZWxldmFudGUgcXVlIHNlIHB1ZWRhIGV4dHJhZXIgZGVsIGFuJmFhY3V0ZTtsaXNpcy4gRXMgZnVuZGFtZW50YWwgZGlzY3V0aXIgZWwgc2lnbmlmaWNhZG8gZGUgbG9zIGhhbGxhemdvcyB5IHJlbGFjaW9uYXJsb3MgY29uIGxvcyBvYmpldGl2b3MgcGxhbnRlYWRvcy4KICAgICAgICAgICAgaHIKICAgICAgICAgICAgbGkKICAgICAgICAgICAgICAubGlzdGEtb2wtLWN1YWRyb19fdmluZXRhCiAgICAgICAgICAgICAgICBzcGFuIDcKICAgICAgICAgICAgICBzcGFuCiAgICAgICAgICAgICAgICBiIENvbmNsdXNpb25lczoKICAgICAgICAgICAgICAgIHwgICBSZXN1bWUgbG9zIGhhbGxhemdvcyBtJmFhY3V0ZTtzIGltcG9ydGFudGVzIGRlbCBpbmZvcm1lIHkgc3VnaWVyZSBwb3NpYmxlcyBhY2Npb25lcyBvIHJlY29tZW5kYWNpb25lcyBiYXNhZGFzIGVuIGxvcyBkYXRvcy4gVGFtYmkmZWFjdXRlO24gc2UgcHVlZGVuIG1lbmNpb25hciBsYXMgbGltaXRhY2lvbmVzIGRlbCBlc3R1ZGlvIHkgcG9zaWJsZXMgJmFhY3V0ZTtyZWFzIGRlIG1lam9yYSBwYXJhIGludmVzdGlnYWNpb25lcyBmdXR1cmFzLgogICAgICAgICAgICBocgogICAgICAgICAgICBsaQogICAgICAgICAgICAgIC5saXN0YS1vbC0tY3VhZHJvX192aW5ldGEKICAgICAgICAgICAgICAgIHNwYW4gOAogICAgICAgICAgICAgIHNwYW4KICAgICAgICAgICAgICAgIGIgQW5leG9zOgogICAgICAgICAgICAgICAgfCAgIEluY2x1eWVuIHRhYmxhcywgZ3ImYWFjdXRlO2ZpY29zIGFkaWNpb25hbGVzIG8gY3VhbHF1aWVyIGluZm9ybWFjaSZvYWN1dGU7biBjb21wbGVtZW50YXJpYSBxdWUgbm8gc2VhIGVzZW5jaWFsIGVuIGVsIGN1ZXJwbyBwcmluY2lwYWwgZGVsIGluZm9ybWUgcGVybyBxdWUgc2VhICZ1YWN1dGU7dGlsIHBhcmEgZWwgbGVjdG9yIGludGVyZXNhZG8gZW4gbSZhYWN1dGU7cyBkZXRhbGxlcy4KICAgICAgICAgICAgaHIKICAgICAgICAuY29sLWxnLTQubXktbGctMC5teS0zLmoxCiAgICAgICAgICBpbWcuaW1nLXQuaW1nLWEoc3JjPSdAL2Fzc2V0cy90ZW1wbGF0ZS9pbWFnZXMvY2YzLzEwOC5wbmcnKQogICAgLnNlcGFyYWRvci1jb250YWluZXIKICAgICAgLnNlcGFyYWRvcgogICAgc2VjdGlvbgogICAgICAjdF82XzIudGl0dWxvLXNlZ3VuZG8uY29sb3ItYWNlbnRvLWJvdG9uZXMKICAgICAgICBoMiA2LjImI3g5O1ByZXNlbnRhY2kmb2FjdXRlO24gZGUgZGF0b3MgZW4gdW4gaW5mb3JtZQogICAgICBwCiAgICAgICAgfCBMYSAKICAgICAgICBiIHByZXNlbnRhY2kmb2FjdXRlO24gZGUgZGF0b3MKICAgICAgICB8ICBlcyB1bm8gZGUgbG9zIGFzcGVjdG9zIG0mYWFjdXRlO3MgaW1wb3J0YW50ZXMgZGUgdW4gaW5mb3JtZSBlc3RhZCZpYWN1dGU7c3RpY28uIERlYmUgc2VyIGNsYXJhIHkgY29tcHJlbnNpYmxlLCB1dGlsaXphbmRvIHRhYmxhcyB5IGdyJmFhY3V0ZTtmaWNvcyBxdWUgZmFjaWxpdGVuIGxhIGludGVycHJldGFjaSZvYWN1dGU7biBkZSBsb3MgcmVzdWx0YWRvcy4gTG9zIGRhdG9zIGRlYmVuIGVzdGFyIG9yZ2FuaXphZG9zIGRlIG1hbmVyYSBjb2hlcmVudGUgeSBhcG95YWRvcyBwb3IgZXhwbGljYWNpb25lcyBjbGFyYXMuCiAgICAgIC50aXR1bG8tc2V4dG8uY29sb3ItYWNlbnRvLWNvbnRlbmlkby5hb3MtaW5pdAogICAgICAgIGg1IEZpZ3VyYSAzLgogICAgICAgIHNwYW4gVGFibGFzIHkgZ3ImYWFjdXRlO2ZpY29zLgogICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIKICAgICAgICAuY29sLWxnLTQubXktbGctMC5teS0zLnAtMAogICAgICAgICAgLmJnMTkucC00LmgtMTAwCiAgICAgICAgICAgIGg1Lm1iLTQudGV4dC1jZW50ZXIgIFRhYmxhcwogICAgICAgICAgICAuYmd3LnAtMy5icmFkLm1iLTMKICAgICAgICAgICAgICB1bC5saXN0YS11bC0tY29sb3IuZmEtdWwKICAgICAgICAgICAgICAgIGxpLm1iLTMKICAgICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2sudjEKICAgICAgICAgICAgICAgICAgc3Bhbi5tYi0wIExhcyB0YWJsYXMgZGViZW4gZXN0YXIgbnVtZXJhZGFzIHkgYWNvbXBhJm50aWxkZTthZGFzIGRlIHQmaWFjdXRlO3R1bG9zIGRlc2NyaXB0aXZvcy4KICAgICAgICAgICAgLmJndy5wLTMuYnJhZC5tYi0zCiAgICAgICAgICAgICAgdWwubGlzdGEtdWwtLWNvbG9yLmZhLXVsCiAgICAgICAgICAgICAgICBsaS5tYi0zCiAgICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrLnYxCiAgICAgICAgICAgICAgICAgIHNwYW4ubWItMAogICAgICAgICAgICAgICAgICAgIHwgU2UgZGViZSBpbmNsdWlyIHVuYSBicmV2ZSBleHBsaWNhY2kmb2FjdXRlO24gZGUgY2FkYSB0YWJsYSBwYXJhIGZhY2lsaXRhciBzdSBpbnRlcnByZXRhY2kmb2FjdXRlO24uCiAgICAgICAgICAgIC5iZ3cucC0zLmJyYWQKICAgICAgICAgICAgICB1bC5saXN0YS11bC0tY29sb3IuZmEtdWwKICAgICAgICAgICAgICAgIGxpLm1iLTMKICAgICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2sudjEKICAgICAgICAgICAgICAgICAgc3Bhbi5tYi0wCiAgICAgICAgICAgICAgICAgICAgfCBMb3MgZGF0b3MgZW4gbGFzIHRhYmxhcyBkZWJlbiBlc3RhciBhbGluZWFkb3MgY29ycmVjdGFtZW50ZSB5IHNlciBmJmFhY3V0ZTtjaWxlcyBkZSBsZWVyLgogICAgICAgIC5jb2wtbGctNC5teS1sZy0wLm15LTMucC0wCiAgICAgICAgICAuYmcxMC5wLTQuaC0xMDAKICAgICAgICAgICAgaDUubWItNC50ZXh0LWNlbnRlciAgR3ImYWFjdXRlO2ZpY29zCiAgICAgICAgICAgIC5iZ3cucC0zLmJyYWQubWItMwogICAgICAgICAgICAgIHVsLmxpc3RhLXVsLS1jb2xvci5mYS11bAogICAgICAgICAgICAgICAgbGkubWItMwogICAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay52MQogICAgICAgICAgICAgICAgICBzcGFuLm1iLTAKICAgICAgICAgICAgICAgICAgICB8IExvcyBnciZhYWN1dGU7Zmljb3MgdXRpbGl6YWRvcyBkZWJlbiBzZXIgYXByb3BpYWRvcyBwYXJhIGVsIHRpcG8gZGUgZGF0b3MgKGhpc3RvZ3JhbWFzIHBhcmEgZGlzdHJpYnVjaW9uZXMsIGdyJmFhY3V0ZTtmaWNvcyBkZSBiYXJyYXMgcGFyYSBjYXRlZ29yJmlhY3V0ZTthcywgZXRjLikuCiAgICAgICAgICAgIC5iZ3cucC0zLmJyYWQubWItMwogICAgICAgICAgICAgIHVsLmxpc3RhLXVsLS1jb2xvci5mYS11bAogICAgICAgICAgICAgICAgbGkubWItMwogICAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay52MQogICAgICAgICAgICAgICAgICBzcGFuLm1iLTAgQ2FkYSBnciZhYWN1dGU7ZmljbyBkZWJlIHRlbmVyIHVuIHQmaWFjdXRlO3R1bG8gY2xhcm8geSBldGlxdWV0YXMgZW4gbG9zIGVqZXMuCiAgICAgICAgICAgIC5iZ3cucC0zLmJyYWQKICAgICAgICAgICAgICB1bC5saXN0YS11bC0tY29sb3IuZmEtdWwKICAgICAgICAgICAgICAgIGxpLm1iLTMKICAgICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2sudjEKICAgICAgICAgICAgICAgICAgc3Bhbi5tYi0wCiAgICAgICAgICAgICAgICAgICAgfCBEZWJlbiBzZXIgdmlzdWFsbWVudGUgc2ltcGxlcywgZXZpdGFuZG8gZWwgdXNvIGV4Y2VzaXZvIGRlIGNvbG9yZXMgbyBlbGVtZW50b3MgZGlzdHJhY3RvcmVzLgogICAgICAgIC5jb2wtbGctNC5teS1sZy0wLm15LTMuajEKICAgICAgICAgIGltZy5pbWctdC5pbWctYShzcmM9J0AvYXNzZXRzL3RlbXBsYXRlL2ltYWdlcy9jZjMvMTA5LnBuZycpCiAgICAgIGZpZ2NhcHRpb24uYm9yZGVyLmJvcmRlci1zZWN1bmRhcnkuYm9yZGVyLXN0YXJ0LTAuYm9yZGVyLWVuZC0wLmJvcmRlci0yLm10LTIKICAgICAgICBwLnRleHQtY2VudGVyLnRleHQtZGFyay5tYi0wIEZ1ZW50ZTogT0lULCAyMDI0LgogICAgLnNlcGFyYWRvci1jb250YWluZXIKICAgICAgLnNlcGFyYWRvcgogICAgc2VjdGlvbgogICAgICAjdF82XzMudGl0dWxvLXNlZ3VuZG8uY29sb3ItYWNlbnRvLWJvdG9uZXMKICAgICAgICBoMiA2LjMmI3g5O0xlbmd1YWplIGNsYXJvIHkgY29uY2lzbwogICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIuYWxpZ24taXRlbXMtY2VudGVyLm1iLTQKICAgICAgICAuY29sLWxnLWF1dG8KICAgICAgICAgIGltZy5pbWctYS5pbWctdChzcmM9J0AvYXNzZXRzL3RlbXBsYXRlL2ltYWdlcy9jZjMvMTEwLnBuZycgYWx0PScnKQogICAgICAgIC5jb2wucHQtbGctMC5wdC1tZC00CiAgICAgICAgICBwLm1iLTAKICAgICAgICAgICAgfCBFbCBsZW5ndWFqZSB1dGlsaXphZG8gZW4gdW4gaW5mb3JtZSBlc3RhZCZpYWN1dGU7c3RpY28gZGViZSBzZXIgY2xhcm8sIGRpcmVjdG8geSBvYmpldGl2by4gTG9zIHQmZWFjdXRlO3JtaW5vcyB0JmVhY3V0ZTtjbmljb3MgZGViZW4gZXN0YXIgZXhwbGljYWRvcyBkZSBtYW5lcmEgcXVlIGN1YWxxdWllciBsZWN0b3IsIGluZGVwZW5kaWVudGVtZW50ZSBkZSBzdSBuaXZlbCBkZSBjb25vY2ltaWVudG8gZXN0YWQmaWFjdXRlO3N0aWNvLCBwdWVkYSBjb21wcmVuZGVyIGVsIGluZm9ybWUuIEVzIGltcG9ydGFudGUgZXZpdGFyIGVsIHVzbyBleGNlc2l2byBkZSBqZXJnYSB0JmVhY3V0ZTtjbmljYSB5IGNlbnRyYXJzZSBlbiBjb211bmljYXIgbGFzIGlkZWFzIGRlIG1hbmVyYSBhY2Nlc2libGUuCiAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlcgogICAgICAgIC5jb2wtbGctNC5teS1sZy0wLm15LTMKICAgICAgICAgIC5iZzI4LnAtNC5icmFkLmgtMTAwCiAgICAgICAgICAgIGltZy5pbWctdC5tYi00KHNyYz0nQC9hc3NldHMvdGVtcGxhdGUvaW1hZ2VzL2NmMy8xMTIucG5nJykKICAgICAgICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtc3RhcnQubWItNAogICAgICAgICAgICAgIHAuY29sLWxnLWF1dG8ubWItMi5iZzExLnB4LTMKICAgICAgICAgICAgICAgIGIKICAgICAgICAgICAgICAgICAgfCBFdml0YXIgZWwgdXNvIGV4Y2VzaXZvIGRlIHRlY25pY2lzbW9zCiAgICAgICAgICAgIHAKICAgICAgICAgICAgICB8IFNpIGVzIG5lY2VzYXJpbyBpbmNsdWlyIHQmZWFjdXRlO3JtaW5vcyBlc3RhZCZpYWN1dGU7c3RpY29zLCBhc2VnJnVhY3V0ZTtyYXRlIGRlIHByb3BvcmNpb25hciB1bmEgYnJldmUgZXhwbGljYWNpJm9hY3V0ZTtuIG8gZGVmaW5pY2kmb2FjdXRlO24uCiAgICAgICAgLmNvbC1sZy00Lm15LWxnLTAubXktMwogICAgICAgICAgLmJnMjkucC00LmJyYWQuaC0xMDAKICAgICAgICAgICAgaW1nLmltZy10Lm1iLTQoc3JjPSdAL2Fzc2V0cy90ZW1wbGF0ZS9pbWFnZXMvY2YzLzExMy5wbmcnKQogICAgICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1zdGFydC5tYi00CiAgICAgICAgICAgICAgcC5jb2wtbGctYXV0by5tYi0yLmJnMTEucHgtMwogICAgICAgICAgICAgICAgYiBDbGFyaWRhZAogICAgICAgICAgICBwCiAgICAgICAgICAgICAgfCBFbCBpbmZvcm1lIGRlYmUgc2VyIGYmYWFjdXRlO2NpbCBkZSBsZWVyIHkgZW50ZW5kZXIuIFNlIGRlYmVuIGV2aXRhciBmcmFzZXMgYW1iaWd1YXMgbyBjb21wbGljYWRhcy4KICAgICAgICAuY29sLWxnLTQubXktbGctMC5teS0zCiAgICAgICAgICAuYmczMC5wLTQuYnJhZC5oLTEwMAogICAgICAgICAgICBpbWcuaW1nLXQubWItNChzcmM9J0AvYXNzZXRzL3RlbXBsYXRlL2ltYWdlcy9jZjMvMTE0LnBuZycpCiAgICAgICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LXN0YXJ0Lm1iLTQKICAgICAgICAgICAgICBwLmNvbC1sZy1hdXRvLm1iLTIuYmcxMS5weC0zCiAgICAgICAgICAgICAgICBiCiAgICAgICAgICAgICAgICAgIHwgUHJlY2lzaSZvYWN1dGU7bgogICAgICAgICAgICBwIExvcyByZXN1bHRhZG9zIGRlYmVuIHByZXNlbnRhcnNlIGRlIG1hbmVyYSBwcmVjaXNhIHkgcmVzcGFsZGFkYSBwb3IgbG9zIGRhdG9zLgogICAgLnNlcGFyYWRvci1jb250YWluZXIKICAgICAgLnNlcGFyYWRvcgogICAgc2VjdGlvbgogICAgICAjdF82XzQudGl0dWxvLXNlZ3VuZG8uY29sb3ItYWNlbnRvLWJvdG9uZXMKICAgICAgICBoMiA2LjQmI3g5O1RpcG9zIGRlIGluZm9ybWVzIGVzdGFkJmlhY3V0ZTtzdGljb3MKICAgICAgcAogICAgICAgIHwgRGVwZW5kaWVuZG8gZGVsIGNvbnRleHRvIHkgbG9zIG9iamV0aXZvcywgZXhpc3RlbiBkaWZlcmVudGVzIHRpcG9zIGRlIGluZm9ybWVzIGVzdGFkJmlhY3V0ZTtzdGljb3M6CiAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlcgogICAgICAgIC5jb2wtbGctNS5teS1sZy0wLm15LTMuajEKICAgICAgICAgIGltZy5pbWctdC5pbWctYShzcmM9J0AvYXNzZXRzL3RlbXBsYXRlL2ltYWdlcy9jZjMvMTE1LnBuZycpCiAgICAgICAgLmNvbC1sZy03Lm15LWxnLTAubXktMwogICAgICAgICAgLmJnMTcucC0zLmJyYWQuajEuaC0xMDAKICAgICAgICAgICAgdWwubGlzdGEtdWwtLWNvbG9yLmZhLXVsCiAgICAgICAgICAgICAgbGkubWItMwogICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2sudjEKICAgICAgICAgICAgICAgIHNwYW4ubWItMAogICAgICAgICAgICAgICAgICBiIEluZm9ybWVzIGRlc2NyaXB0aXZvczoKICAgICAgICAgICAgICAgICAgfCAgc2UgY2VudHJhbiBlbiBkZXNjcmliaXIgbG9zIGRhdG9zIG1lZGlhbnRlIGVsIHVzbyBkZSBlc3RhZCZpYWN1dGU7c3RpY2FzIGRlc2NyaXB0aXZhcyBjb21vIGxhIG1lZGlhLCBtZWRpYW5hLCBtb2RhLCBkZXN2aWFjaSZvYWN1dGU7biBlc3QmYWFjdXRlO25kYXIgeSBnciZhYWN1dGU7ZmljYXMgcXVlIHJlcHJlc2VudGVuIHZpc3VhbG1lbnRlIGxvcyBkYXRvcy4KICAgICAgICAgICAgICBsaS5tYi0zCiAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay52MQogICAgICAgICAgICAgICAgc3Bhbi5tYi0wCiAgICAgICAgICAgICAgICAgIGIgSW5mb3JtZXMgY29tcGFyYXRpdm9zOgogICAgICAgICAgICAgICAgICB8ICBlbiBlc3RvcyBpbmZvcm1lcywgc2UgY29tcGFyYW4gZGlmZXJlbnRlcyBncnVwb3MgbyBjb25kaWNpb25lcyBwYXJhIGlkZW50aWZpY2FyIGRpZmVyZW5jaWFzIHNpZ25pZmljYXRpdmFzIG8gcGF0cm9uZXMgZW4gbG9zIGRhdG9zLgogICAgICAgICAgICAgIGxpCiAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay52MQogICAgICAgICAgICAgICAgc3Bhbi5tYi0wCiAgICAgICAgICAgICAgICAgIGIgSW5mb3JtZXMgcHJlZGljdGl2b3M6CiAgICAgICAgICAgICAgICAgIHwgIHV0aWxpemFuIG1vZGVsb3MgZXN0YWQmaWFjdXRlO3N0aWNvcyBwYXJhIGhhY2VyIHByZWRpY2Npb25lcyBzb2JyZSB0ZW5kZW5jaWFzIGZ1dHVyYXMgbyByZXN1bHRhZG9zIHByb2JhYmxlcyBiYXNhZG9zIGVuIGxvcyBkYXRvcyBhY3R1YWxlcy4KICAgIC5zZXBhcmFkb3ItY29udGFpbmVyCiAgICAgIC5zZXBhcmFkb3IKICAgIHNlY3Rpb24KICAgICAgI3RfNl81LnRpdHVsby1zZWd1bmRvLmNvbG9yLWFjZW50by1ib3RvbmVzCiAgICAgICAgaDIgNi41JiN4OTtFbGFib3JhY2kmb2FjdXRlO24gZGUgY29uY2x1c2lvbmVzIHkgcmVjb21lbmRhY2lvbmVzCiAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlcgogICAgICAgIC5jb2wtbGctNy5teS1sZy0wLm15LTMucC0wCiAgICAgICAgICBwCiAgICAgICAgICAgIHwgTGFzIAogICAgICAgICAgICBiIGNvbmNsdXNpb25lcwogICAgICAgICAgICB8ICBkZWJlbiBlc3RhciBkaXJlY3RhbWVudGUgcmVsYWNpb25hZGFzIGNvbiBsb3Mgb2JqZXRpdm9zIHBsYW50ZWFkb3MgYWwgaW5pY2lvIGRlbCBpbmZvcm1lLiBMYXMgY29uY2x1c2lvbmVzIHNlYW4gb2JqZXRpdmFzIHkgc2UgYmFzZW4gZW4gbG9zIHJlc3VsdGFkb3MgcHJlc2VudGFkb3MuIEFkZW0mYWFjdXRlO3MsIGxhcyByZWNvbWVuZGFjaW9uZXMgZGViZW4gb2ZyZWNlciBzdWdlcmVuY2lhcyBwciZhYWN1dGU7Y3RpY2FzIG8gYWNjaW9uZXMgcXVlIHNlIHB1ZWRlbiB0b21hciBlbiBiYXNlIGEgbG9zIGhhbGxhemdvcyBkZWwgaW5mb3JtZS4KICAgICAgICAgIC5iZzE4LnAtNAogICAgICAgICAgICAuYmd3LnAtMy5icmFkLm1iLTMKICAgICAgICAgICAgICB1bC5saXN0YS11bC0tY29sb3IuZmEtdWwKICAgICAgICAgICAgICAgIGxpLm1iLTMKICAgICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2sudjEKICAgICAgICAgICAgICAgICAgc3Bhbi5tYi0wCiAgICAgICAgICAgICAgICAgICAgYiBDb25jbHVzaW9uZXM6CiAgICAgICAgICAgICAgICAgICAgfCAgUmVzdW1lbiBkZSBsb3MgaGFsbGF6Z29zIG0mYWFjdXRlO3MgaW1wb3J0YW50ZXMgZGVsIGFuJmFhY3V0ZTtsaXNpcy4gU2UgZGViZW4gbWVuY2lvbmFyIGxvcyBwcmluY2lwYWxlcyBhc3BlY3RvcyBxdWUgcmVzcG9uZGFuIGEgbGFzIHByZWd1bnRhcyBkZSBpbnZlc3RpZ2FjaSZvYWN1dGU7bi4KICAgICAgICAgICAgLmJndy5wLTMuYnJhZAogICAgICAgICAgICAgIHVsLmxpc3RhLXVsLS1jb2xvci5mYS11bAogICAgICAgICAgICAgICAgbGkubWItMwogICAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay52MQogICAgICAgICAgICAgICAgICBzcGFuLm1iLTAKICAgICAgICAgICAgICAgICAgICB8IFJlY29tZW5kYWNpb25lczogU3VnZXJlbmNpYXMgc29icmUgYyZvYWN1dGU7bW8gYXBsaWNhciBsb3MgcmVzdWx0YWRvcyBlbiB1biBjb250ZXh0byBwciZhYWN1dGU7Y3RpY28uIFB1ZWRlbiBpbmNsdWlyIHByb3B1ZXN0YXMgZGUgY2FtYmlvcywgbWVqb3JhcywgbyByZWNvbWVuZGFjaW9uZXMgcGFyYSBmdXR1cmFzIGludmVzdGlnYWNpb25lcy4KICAgICAgICAuY29sLWxnLTUubXktbGctMC5teS0zLmoxCiAgICAgICAgICBpbWcuaW1nLXQuaW1nLWEoc3JjPSdAL2Fzc2V0cy90ZW1wbGF0ZS9pbWFnZXMvY2YzLzExNi5wbmcnKQogICAgLnNlcGFyYWRvci1jb250YWluZXIKICAgICAgLnNlcGFyYWRvcgogICAgc2VjdGlvbgogICAgICAjdF82XzYudGl0dWxvLXNlZ3VuZG8uY29sb3ItYWNlbnRvLWJvdG9uZXMKICAgICAgICBoMiA2LjYmI3g5O0Vycm9yZXMgY29tdW5lcyBlbiBsb3MgaW5mb3JtZXMgZXN0YWQmaWFjdXRlO3N0aWNvcwogICAgICBwLm1iLTUKICAgICAgICB8IEFsIGVsYWJvcmFyIHVuIGluZm9ybWUgZXN0YWQmaWFjdXRlO3N0aWNvLCBlcyBpbXBvcnRhbnRlIGV2aXRhciBlcnJvcmVzIGNvbXVuZXMgcXVlIHB1ZWRlbiBhZmVjdGFyIGxhIGNsYXJpZGFkIHkgcHJlY2lzaSZvYWN1dGU7biBkZWwgZG9jdW1lbnRvLiBBbGd1bm9zIGRlIGVzdG9zIGVycm9yZXMgaW5jbHV5ZW46CiAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlcgogICAgICAgIC5jb2wtbGctMy5teS1sZy0wLm15LTMKICAgICAgICAgIC5iZzI4LnAtNC5icmFkLmgtMTAwCiAgICAgICAgICAgIGltZy5pbWctdC5pbWctYS5tYi00KHNyYz0nQC9hc3NldHMvdGVtcGxhdGUvaW1hZ2VzL2NmMy8xMTcucG5nJykKICAgICAgICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLm1iLTQKICAgICAgICAgICAgICBwLmNvbC1sZy1hdXRvLm1iLTIuYmcxMS5weC0zCiAgICAgICAgICAgICAgICBiCiAgICAgICAgICAgICAgICAgIHwgTWFsYSBzZWxlY2NpJm9hY3V0ZTtuIGRlIGdyJmFhY3V0ZTtmaWNvcwogICAgICAgICAgICBwCiAgICAgICAgICAgICAgfCBVdGlsaXphciBnciZhYWN1dGU7Zmljb3MgcXVlIG5vIHJlcHJlc2VudGVuIGNvcnJlY3RhbWVudGUgbG9zIGRhdG9zIHB1ZWRlIGxsZXZhciBhIG1hbGludGVycHJldGFjaW9uZXMKICAgICAgICAuY29sLWxnLTMubXktbGctMC5teS0zCiAgICAgICAgICAuYmcyOC5wLTQuYnJhZC5oLTEwMAogICAgICAgICAgICBpbWcuaW1nLXQuaW1nLWEubWItNChzcmM9J0AvYXNzZXRzL3RlbXBsYXRlL2ltYWdlcy9jZjMvMTE4LnBuZycpCiAgICAgICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5tYi00CiAgICAgICAgICAgICAgcC5jb2wtbGctYXV0by5tYi0yLmJnMTEucHgtMwogICAgICAgICAgICAgICAgYiBFeGNlc28gZGUgZGV0YWxsZXMgdCZlYWN1dGU7Y25pY29zCiAgICAgICAgICAgIHAKICAgICAgICAgICAgICB8IEluY2x1aXIgZGVtYXNpYWRhIGluZm9ybWFjaSZvYWN1dGU7biB0JmVhY3V0ZTtjbmljYSBwdWVkZSBhYnJ1bWFyIGFsIGxlY3RvciB5IGRpZmljdWx0YXIgbGEgY29tcHJlbnNpJm9hY3V0ZTtuIGRlIGxvcyByZXN1bHRhZG9zLgogICAgICAgIC5jb2wtbGctMy5teS1sZy0wLm15LTMKICAgICAgICAgIC5iZzI4LnAtNC5icmFkLmgtMTAwCiAgICAgICAgICAgIGltZy5pbWctdC5pbWctYS5tYi00KHNyYz0nQC9hc3NldHMvdGVtcGxhdGUvaW1hZ2VzL2NmMy8xMTkucG5nJykKICAgICAgICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLm1iLTQKICAgICAgICAgICAgICBwLmNvbC1sZy1hdXRvLm1iLTIuYmcxMS5weC0zCiAgICAgICAgICAgICAgICBiCiAgICAgICAgICAgICAgICAgIHwgSW50ZXJwcmV0YWNpb25lcyBlcnImb2FjdXRlO25lYXMKICAgICAgICAgICAgcAogICAgICAgICAgICAgIHwgU2FjYXIgY29uY2x1c2lvbmVzIHF1ZSBubyBlc3QmYWFjdXRlO24gcmVzcGFsZGFkYXMgcG9yIGxvcyBkYXRvcyBvIGV4YWdlcmFyIGxhIGltcG9ydGFuY2lhIGRlIGNpZXJ0b3MgcmVzdWx0YWRvcy4KICAgICAgICAuY29sLWxnLTMubXktbGctMC5teS0zCiAgICAgICAgICAuYmcyOC5wLTQuYnJhZC5oLTEwMAogICAgICAgICAgICBpbWcuaW1nLXQuaW1nLWEubWItNChzcmM9J0AvYXNzZXRzL3RlbXBsYXRlL2ltYWdlcy9jZjMvMTIwLnBuZycpCiAgICAgICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5tYi00CiAgICAgICAgICAgICAgcC5jb2wtbGctYXV0by5tYi0yLmJnMTEucHgtMwogICAgICAgICAgICAgICAgYgogICAgICAgICAgICAgICAgICB8IEZhbHRhIGRlIGNvaGVyZW5jaWEKICAgICAgICAgICAgcAogICAgICAgICAgICAgIHwgTm8gc2VndWlyIHVuYSBlc3RydWN0dXJhIGNsYXJhIG8gaW5jbHVpciBzZWNjaW9uZXMgcXVlIG5vIGVzdCZlYWN1dGU7biBiaWVuIGNvbmVjdGFkYXMgZW50cmUgcyZpYWN1dGU7LgoKCg=="},null]}